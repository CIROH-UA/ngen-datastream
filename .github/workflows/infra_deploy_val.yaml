name: Terraform PR Validation

on:
  workflow_dispatch:   
  push:
    branches:
      - main
      - infra_deployment
    paths:
      - 'infra/aws/terraform/**'
      - '.github/workflows/terraform-*.yml'
      - 'infra/aws/python/src/research_datastream/**'
  pull_request:
    branches:
      - main
      - infra_deployment
    paths:
      - 'infra/aws/terraform/**'
      - '.github/workflows/terraform-*.yml'
      - 'infra/aws/python/src/research_datastream/**'
env:
  TF_VAR_FILE: variables.tfvars
  AWS_REGION: us-east-1
  TERRAFORM_VERSION: 1.9.0


jobs:
  generate-executions:
    name: Generate VPU Execution Files
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'
    
    - name: Install Python dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq
        pip install --upgrade pip
        pip install --upgrade awscli
        pip install --upgrade awscli boto3 pandas

    - name: Configure AWS
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws configure set region us-east-1    

    - name: Generate execution files
      working-directory: infra/aws
      run: |
        echo "Working directory: $(pwd)"
        echo "Generating VPU execution files..."
        python python/src/research_datastream/gen_vpu_execs.py \
        --arch arm \
        --inputs terraform/modules/schedules/config/execution_forecast_inputs.json \
        --ami_file terraform/modules/schedules/config/community_ami.txt \
        --exec_template_vpu terraform/modules/schedules/executions/templates/execution_datastream_VPU_template.json \
        --exec_template_fp terraform/modules/schedules/executions/templates/execution_datastream_fp_template.json \
        --out_dir terraform/modules/schedules/executions

        echo "::notice::Execution files generated successfully"

  terraform-check:
    name: Terraform Quality Checks
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: infra/aws/terraform
    
    permissions:
      contents: read
      pull-requests: write
      id-token: write
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'
    
    - name: Install Python dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq
        pip install --upgrade pip
        pip install --upgrade awscli
        pip install --upgrade awscli boto3 pandas


    - name: Configure AWS
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws configure set region us-east-1    
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        terraform_wrapper: false
    
    - name: Terraform Format Check
      id: fmt
      run: terraform fmt -check -recursive
      continue-on-error: true
    
    - name: Terraform Init
      id: init
      run: terraform init -backend-config="key=terraform/${{ github.repository }}.tfstate"
    
    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
    
    - name: Check for tfvars files
      id: check_tfvars
      run: |
        echo "Checking for required tfvars files..."
        
        # Check if the main tfvars file exists
        if [ ! -f "${{ env.TF_VAR_FILE }}" ]; then
          echo "::error::Missing required tfvars file: ${{ env.TF_VAR_FILE }}"
          exit 1
        fi
        
        echo "::notice::Found tfvars file: ${{ env.TF_VAR_FILE }}"
        
        # Validate tfvars syntax
        terraform fmt -check "${{ env.TF_VAR_FILE }}" || {
          echo "::warning::File ${{ env.TF_VAR_FILE }} is not properly formatted"
        }
        
        # Optionally check for environment-specific tfvars if they exist
        if [ -d "environments" ]; then
          tfvars_count=$(find environments -name "*.tfvars" -type f | wc -l)
          if [ "$tfvars_count" -gt 0 ]; then
            echo "::notice::Found $tfvars_count additional environment tfvars file(s)"
            find environments -name "*.tfvars" -type f
          fi
        fi

    - name: Run tfsec Security Scan
      id: tfsec
      uses: aquasecurity/tfsec-pr-commenter-action@v1.3.1
      with:
        github_token: ${{ github.token }}
        working_directory: infra/aws/terraform
        soft_fail_commenter: true
    
    - name: Run Checkov Security Scan
      id: checkov
      uses: bridgecrewio/checkov-action@v12
      with:
        directory: infra/aws/terraform
        framework: terraform
        output_format: cli,sarif
        output_file_path: console,results.sarif
        soft_fail: true
    
    - name: Upload Checkov Results
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: results.sarif
      continue-on-error: true
    
    - name: Terraform Plan
      id: plan
      run: |
        terraform plan -var-file=./${{ env.TF_VAR_FILE }} -no-color -out=tfplan
        terraform show -no-color tfplan > plan_output.txt
      continue-on-error: true
    
    - name: Upload Plan Artifact
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan-${{ github.sha }}
        path: infra/aws/terraform/tfplan
        retention-days: 10
    
    - name: Upload Plan Output
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan-output-${{ github.sha }}
        path: infra/aws/terraform/plan_output.txt
        retention-days: 10
    
    - name: Check for Plan Failures
      if: steps.plan.outcome == 'failure'
      run: exit 1
    
    - name: Check for Format Failures
      if: steps.fmt.outcome == 'failure'
      run: |
        echo "::error::Terraform files are not properly formatted. Run 'terraform fmt -recursive' locally."
        exit 1