name: NRDS Health Check and Auto-Rerun

on:
  workflow_dispatch:
    inputs:
      start_date:
        description: 'Start date (YYYYMMDD)'
        required: false
        default: ''
      end_date:
        description: 'End date (YYYYMMDD)'
        required: false
        default: ''
      vpus:
        description: 'VPUs (comma-separated or "all")'
        required: false
        default: 'all'
      run_types:
        description: 'Run types (comma-separated or "all")'
        required: false
        default: 'all'
      auto_rerun:
        description: 'Automatically trigger reruns for failures'
        type: boolean
        default: false
  schedule:
    - cron: '0 */6 * * *'  # Every 6 hours

permissions:
  contents: read

jobs:
  health-check:
    runs-on: ubuntu-latest
    outputs:
      has_failures: ${{ steps.health_check.outputs.has_failures }}
      failure_count: ${{ steps.health_check.outputs.failure_count }}
      failures: ${{ steps.health_check.outputs.failures }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Set Parameters
        id: params
        run: |
          # Default: check last 7 days for manual runs, yesterday for scheduled
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ -n "${{ github.event.inputs.start_date }}" ]; then
              START_DATE="${{ github.event.inputs.start_date }}"
            else
              START_DATE=$(date -d '7 days ago' +%Y%m%d)
            fi
            
            if [ -n "${{ github.event.inputs.end_date }}" ]; then
              END_DATE="${{ github.event.inputs.end_date }}"
            else
              END_DATE=$(date -d 'yesterday' +%Y%m%d)
            fi
            
            VPUS="${{ github.event.inputs.vpus }}"
            RUN_TYPES="${{ github.event.inputs.run_types }}"
            AUTO_RERUN="${{ github.event.inputs.auto_rerun }}"
          else
            # Scheduled run - check yesterday only
            START_DATE=$(date -d 'yesterday' +%Y%m%d)
            END_DATE=$(date -d 'yesterday' +%Y%m%d)
            VPUS="all"
            RUN_TYPES="all"
            AUTO_RERUN="true"
          fi
          
          echo "start_date=$START_DATE" >> $GITHUB_OUTPUT
          echo "end_date=$END_DATE" >> $GITHUB_OUTPUT
          echo "vpus=$VPUS" >> $GITHUB_OUTPUT
          echo "run_types=$RUN_TYPES" >> $GITHUB_OUTPUT
          echo "auto_rerun=$AUTO_RERUN" >> $GITHUB_OUTPUT
          
          echo "Health check parameters:"
          echo "  Date range: $START_DATE to $END_DATE"
          echo "  VPUs: $VPUS"
          echo "  Run types: $RUN_TYPES"
          echo "  Auto rerun: $AUTO_RERUN"

      - name: Run Health Check and Capture Failures
        id: health_check
        run: |
          ./check_datastream_outputs.sh \
            --start ${{ steps.params.outputs.start_date }} \
            --end ${{ steps.params.outputs.end_date }} \
            --vpus ${{ steps.params.outputs.vpus }} \
            --run_types ${{ steps.params.outputs.run_types }} 2>&1 | tee health_output.txt
          
          # Parse failures into JSON array
          failures=$(grep "missing" health_output.txt | awk '{print $1}' | while read url; do
            date=$(echo "$url" | sed -n 's/.*ngen\.\([0-9]\{8\}\).*/\1/p')
            type=$(echo "$url" | sed -n 's/.*ngen\.[0-9]\{8\}\/\([^\/]*\).*/\1/p')
            cycle=$(echo "$url" | sed -n "s/.*\/$type\/\([0-9]\{2\}\).*/\1/p")
            vpu=$(echo "$url" | sed -n 's/.*VPU_\([^\/]*\).*/\1/p')
            
            if [[ "$type" == "medium_range" ]]; then
              ens=$(echo "$url" | sed -n 's/.*\/[0-9]\{2\}\/\([0-9]\)\/VPU.*/\1/p')
              echo "{\"date\":\"$date\",\"type\":\"$type\",\"cycle\":\"$cycle\",\"ensemble\":\"$ens\",\"vpu\":\"$vpu\"}"
            else
              echo "{\"date\":\"$date\",\"type\":\"$type\",\"cycle\":\"$cycle\",\"vpu\":\"$vpu\"}"
            fi
          done | jq -s '.')
          
          # Set outputs
          echo "failures<<EOF" >> $GITHUB_OUTPUT
          echo "$failures" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          count=$(echo "$failures" | jq 'length')
          echo "has_failures=$([ $count -gt 0 ] && echo true || echo false)" >> $GITHUB_OUTPUT
          echo "failure_count=$count" >> $GITHUB_OUTPUT
          
          echo ""
          echo "Total failures found: $count"
          if [ $count -gt 0 ]; then
            echo "$failures" | jq '.'
          fi
