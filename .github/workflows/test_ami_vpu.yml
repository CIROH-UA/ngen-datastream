name: Test Research DataStream All VPUs (01-18)

on:
  workflow_dispatch:     
  push:
    branches: 
      - release_tags
    paths:
      - 't_version.yml'

permissions:
  contents: read

jobs:
  test-all-vpus:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false  # Continue testing other VPUs even if one fails
      matrix:
        vpu: ["01", "02", "03N", "03S", "03W", "04", "05", "06", "07", "08", "09", "10L", "10U", "11", "12", "13", "14", "15", "16", "17", "18"]
    env:
      VPU: ${{ matrix.vpu }}
      DATE: 20250801
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          pip install --upgrade awscli

      - name: Download and modify execution JSON
        run: |
          cd research_datastream/terraform_community
          aws s3 cp s3://ciroh-community-ngen-datastream/v2.2/ngen.${{ env.DATE }}/short_range/00/VPU_16/datastream-metadata/execution.json execution.json 
          # Replace the working AMI with your custom one (if testing custom AMI)
          sed -i "s|ami-0e621409bdbd530a0|ami-08ba29a4cd4eb9824|g" execution.json
          echo "Modified execution.json:"
          cat execution.json
          echo "Processing VPU ${{ env.VPU }}..."
          # Apply jq transformations for this specific VPU
          jq --arg DATE "${{ env.DATE }}" --arg VPU "${{ env.VPU }}" 'del(.instance_parameters.MaxCount, .instance_parameters.MinCount, .instance_parameters.InstanceId, .t0, .ii_s3_object_checked, .retry_attempt, .region) | .instance_parameters.TagSpecifications = [{"ResourceType": "instance", "Tags": [{"Key": "Project", "Value": "fp_test_git_actions_vpu_\($VPU)"}]}] | .commands |= map(sub("--S3_PREFIX(?i) \\K[^ ]+"; "tests/short_range/VPU_\($VPU)'\''")) | .commands |= map(gsub("VPU_16"; "VPU_\($VPU)")) | .commands |= map(gsub("-s DAILY"; "-s DAILY -e \($DATE)0000"))' execution.json > temp.json

      - name: Check and create AWS key pair
        run: |
          cd research_datastream/terraform_community
          if ! aws ec2 describe-key-pairs --key-names "actions_key" --query 'KeyPairs[0].KeyName' --output text 2>/dev/null; then 
            aws ec2 create-key-pair --key-name "actions_key" --query 'KeyName' --output text && echo "Key pair 'actions_key' created in AWS"; 
          else 
            echo "Key pair 'actions_key' already exists"; 
          fi

      - name: Start and monitor Step Functions execution
        id: stepfunction
        run: |
          cd research_datastream/terraform_community
          execution_arn=$(aws stepfunctions start-execution --state-machine-arn $(cat ./sm_ARN.txt) --name VPU_${{ env.VPU }}_test_$(env TZ=US/Eastern date +'%Y%m%d%H%M%S') --input "file://temp.json" --region us-east-1 --query 'executionArn' --output text)
          echo "Execution ARN: $execution_arn"
          status="RUNNING"
          while [ "$status" != "SUCCEEDED" ]; do
            status=$(aws stepfunctions describe-execution --execution-arn "$execution_arn" --region us-east-1 --query 'status' --output text)
            echo "Current status: $status"
            if [ "$status" == "FAILED" ]; then
              echo "State machine execution failed for VPU ${{ env.VPU }}!"
              echo "stepfunction_failed=true" >> "$GITHUB_OUTPUT"
              exit 1
            fi
            sleep 5
          done
          echo "State machine execution succeeded for VPU ${{ env.VPU }}!"
          echo "stepfunction_failed=false" >> "$GITHUB_OUTPUT"

      - name: Verify output files
        run: |
          url -fSs -o test.txt https://ciroh-community-ngen-datastream.s3.amazonaws.com/tests/short_range/VPU_${{ env.VPU }}/merkdir.file || { echo "Error: File not found or request failed"; exit 1; }
                
      - name: Clean up
        if: always()
        run: |
          aws s3 rm --recursive s3://ciroh-community-ngen-datastream/tests/short_range/VPU_${{ env.VPU }} || echo "No files to delete for VPU ${{ env.VPU }}"



# Summary job that runs after all VPUs complete
  test-summary:
    runs-on: ubuntu-latest
    needs: test-all-vpus
    if: always()  # Run even if some VPUs failed
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Check VPU Test Results and Handle AMI
        run: |
          echo "VPU Testing Summary:"
          echo "======================"
          echo "Date: $(date)"
          echo "Total VPUs Tested: 18"
          echo ""
          
          # Check if any VPU tests failed
          # GitHub Actions sets job results in the needs context
          any_failed=false
          
          # Parse the results from the matrix jobs
          echo "Checking individual VPU results..."
          
          # In GitHub Actions, when any job in needs.test-all-vpus fails, 
          # the overall needs.test-all-vpus.result will be 'failure'
          if [ "${{ needs.test-all-vpus.result }}" != "success" ]; then
            any_failed=true
            echo "One or more VPU tests failed"
          else
            echo "All VPU tests passed"
          fi
          
          echo "VPUs tested: 01, 02, 03, 04, 05, 06, 07, 08, 09, 10, 11, 12, 13, 14, 15, 16, 17, 18"
          echo " Check individual job logs above for detailed results"
          echo " All test files have been cleaned up from S3"
          
          # Set output for next step
          echo "any_failed=$any_failed" >> $GITHUB_ENV

      - name: Deregister AMI on any test failure
        if: env.any_failed == 'true'
        run: |
          echo " VPU tests failed - checking for custom AMI to deregister..."
          
          ami_to_deregister="ami-08ba29a4cd4eb9824"
          
          if [ "$ami_to_deregister" != "None" ] && [ "$ami_to_deregister" != "" ] && [ "$ami_to_deregister" != "null" ]; then
            echo "Found AMI to deregister: $ami_to_deregister"
            
            ami_name=$(aws ec2 describe-images --image-ids $ami_to_deregister --query 'Images[0].Name' --output text --region us-east-1 2>/dev/null || echo "Unknown")
            echo "AMI Name: $ami_name"
            
            # Get snapshot IDs before deregistering
            echo "Getting snapshot IDs..."
            snapshot_ids=$(aws ec2 describe-images --image-ids $ami_to_deregister --query 'Images[0].BlockDeviceMappings[*].Ebs.SnapshotId' --output text --region us-east-1 2>/dev/null || echo "")
            
            if [ -n "$snapshot_ids" ]; then
              echo "Found snapshots: $snapshot_ids"
            fi
            
            # Deregister AMI
            echo "Deregistering AMI: $ami_to_deregister"
            aws ec2 deregister-image --image-id $ami_to_deregister --region us-east-1
            echo " AMI $ami_to_deregister deregistered successfully"
            
            # Delete associated snapshots
            if [ -n "$snapshot_ids" ]; then
              for snapshot_id in $snapshot_ids; do
                if [ "$snapshot_id" != "None" ] && [ "$snapshot_id" != "" ] && [ "$snapshot_id" != "null" ]; then
                  echo "Deleting snapshot: $snapshot_id"
                  aws ec2 delete-snapshot --snapshot-id $snapshot_id --region us-east-1
                  echo "Snapshot $snapshot_id deleted"
                fi
              done
            else
              echo "No snapshots found to delete"
            fi
            
            echo "  AMI cleanup completed due to test failures"
          else
            echo "No custom AMI found to deregister"
          fi

      - name: Final Summary
        run: |
          echo " Final Results:"
          
          if [ "${{ env.any_failed }}" == "true" ]; then
            echo " OVERALL RESULT: Some VPU tests failed"
            echo "  Custom AMI has been deregistered due to failures"
            echo " Review failed VPU logs above for troubleshooting"
            exit 1
          else
            echo " OVERALL RESULT: All VPU tests passed successfully"
            echo " Custom AMI is validated and preserved"
            echo " Ready for production deployment"
          fi
